struct Node{
    Node *links[2];
    bool containsKey(int bit)
    {
        return (links[bit]!=NULL);
    }
    Node* get(int bit)
    {
        return links[bit];
    }
    void put(int bit,Node *node)
    {
        links[bit]=node;
    }
};
class Trie{
    public:
    Node *root;
    Trie()
    {
        root=new Node();
    }
    void insert(int num)
    {
        Node *node=root;
        for(int i=31;i>=0;i--)
        {
            int bit=(num>>i)&1;
            if(!node->containsKey(bit))
            {
                node->put(bit,new Node());

            }
            node=node->get(bit);
        }
    }
    int getMax(int num)
    {
            Node *node=root;
            int maxNum=0;
            for(int i=31;i>=0;i--)
            {
                int bit=(num>>i)&1;
                if(node->containsKey(1-bit))
                {
                    node=node->get(1-bit);
                    maxNum=maxNum|(1<<i);
                }
                else
                node=node->get(bit);
            }
            return maxNum;
    }
};

class Solution {
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        vector<pair<int,pair<int,int>>> v;
        int n=nums.size();
        int q=queries.size();
        for(int i=0;i<q;i++)
        {
            v.push_back({queries[i][1],{queries[i][0],i}});
        }
        sort(v.begin(),v.end());
        sort(nums.begin(),nums.end());
        vector<int> ans(q,-1);
        int ind=0;
        Trie trie;
        for(auto it:v)
        {
            int ai=it.first;
            int xi=it.second.first;
            int j=it.second.second;
            while(ind<n && nums[ind]<=ai)
            {
               trie.insert(nums[ind]);
               ind++;

            }
            if(ind!=0)
            {
                  int maxa=trie.getMax(xi);
                  ans[j]=maxa;
            }
            
        }
        return ans;
    }
};