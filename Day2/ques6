#include <bits/stdc++.h> 
long long merge(long long arr[],long long left,long long right,long long temp[],long long  mid)
    {
        long long  i,j,k;
        i=left;
        j=mid;
        k=left;
        long long count=0;
        while((i<=mid-1) && j<=(right))
        {
            if(arr[i]<=arr[j])
            temp[k++]=arr[i++];
            else
            {
                temp[k++]=arr[j++];
                count=count+(mid-i);
            }
            
        }
        while(i<=mid-1)
        temp[k++]=arr[i++];
         while(j<=right)
        temp[k++]=arr[j++];
        for(i=left;i<=right;i++)
        {
            arr[i]=temp[i];
        }
        return count;
    }
    long long mergesort(long long arr[],int left,int right,long long  temp[])
    {
        long long mid=0, inv=0;
        if(right>left)
        {
            long long mid=(right+left)/2;
            inv+=mergesort(arr,left,mid,temp);
            inv+=mergesort(arr,mid+1,right,temp);
            inv+=merge(arr,left,right,temp,mid+1);
        }
        return inv;
    }
long long getInversions(long long *arr, int n){
    // Write your code here.
     long long  temp[n];
       long long ans=mergesort(arr,0,n-1,temp);
       return ans;
}