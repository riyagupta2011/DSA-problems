bool isLeaf(TreeNode<int>* root)
{
    if(root->left==NULL && root->right==NULL)
    return true;
    return false;
}
void leftBoundary(TreeNode<int>* root,vector<int> &ans)
{
    TreeNode<int>* curr=root->left;
    while(curr)
    {
        if(!isLeaf(curr))
        ans.push_back(curr->data);
        if(curr->left)
        curr=curr->left;
        else
        curr=curr->right;
    }
}
void rightBoundary(TreeNode<int>* root,vector<int> &ans)
{
   TreeNode<int>* curr=root->right;
   vector<int> temp;
   while(curr)
   {
      if(!isLeaf(curr))
        temp.push_back(curr->data);
        if(curr->right)
        curr=curr->right;
        else
        curr=curr->left;
   }
   reverse(temp.begin(),temp.end());
   for(int i=0;i<temp.size();i++)
   {
       ans.push_back(temp[i]);
   }
}

void addLeaves(TreeNode<int>* root,vector<int> &ans)
{
    if(isLeaf(root))
    {
      ans.push_back(root->data);
      return;
    }
    if(root->left)
    addLeaves(root->left,ans);
    if(root->right)
    addLeaves(root->right,ans);
    
}

vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> ans;
    if(root==NULL)
    return ans;
    if(!isLeaf(root))
    ans.push_back(root->data);
   
   leftBoundary(root,ans);
   addLeaves(root,ans);
   rightBoundary(root,ans);
   
   return ans;

}